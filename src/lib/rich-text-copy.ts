// src/lib/rich-text-copy.ts
import toast from 'react-hot-toast';

// Convert markdown-style text to HTML
export const convertToHTML = (text: string): string => {
  return text
    // Headers
    .replace(/^### (.*$)/gim, '<h3 style="font-size: 1.25rem; font-weight: 600; margin: 1.5rem 0 0.75rem 0; color: #374151;">$1</h3>')
    .replace(/^## (.*$)/gim, '<h2 style="font-size: 1.5rem; font-weight: 700; margin: 2rem 0 1rem 0; color: #1f2937; border-bottom: 2px solid #e5e7eb; padding-bottom: 0.5rem;">$1</h2>')
    .replace(/^# (.*$)/gim, '<h1 style="font-size: 1.875rem; font-weight: 800; margin: 2rem 0 1.5rem 0; color: #111827; border-bottom: 3px solid #3b82f6; padding-bottom: 0.75rem;">$1</h1>')
    
    // Code blocks
    .replace(/```(\w+)?\n([\s\S]*?)```/gim, '<pre style="background: #1f2937; color: #f9fafb; padding: 1rem; border-radius: 0.5rem; overflow-x: auto; margin: 1.5rem 0; border: 1px solid #374151; font-family: \'Courier New\', monospace; font-size: 0.875rem;"><code>$2</code></pre>')
    .replace(/`([^`]+)`/gim, '<code style="background: #dbeafe; color: #1e40af; padding: 0.25rem 0.5rem; border-radius: 0.25rem; font-family: \'Courier New\', monospace; font-size: 0.875rem; border: 1px solid #bfdbfe;">$1</code>')
    
    // Bold and italic
    .replace(/\*\*([^*]+)\*\*/gim, '<strong style="font-weight: 600; color: #111827;">$1</strong>')
    .replace(/\*([^*]+)\*/gim, '<em style="font-style: italic; color: #374151;">$1</em>')
    
    // Links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/gim, '<a href="$2" style="color: #2563eb; text-decoration: underline; font-weight: 500;" target="_blank" rel="noopener noreferrer">$1</a>')
    
    // Lists
    .replace(/^\* (.+$)/gim, '<li style="margin-left: 1.5rem; margin-bottom: 0.5rem; color: #374151;">• $1</li>')
    .replace(/^- (.+$)/gim, '<li style="margin-left: 1.5rem; margin-bottom: 0.5rem; color: #374151;">• $1</li>')
    
    // Blockquotes
    .replace(/^> (.+$)/gim, '<blockquote style="border-left: 4px solid #3b82f6; background: #eff6ff; padding: 0.75rem 1.5rem; margin: 1rem 0; font-style: italic; color: #374151; border-radius: 0 0.5rem 0.5rem 0;">$1</blockquote>')
    
    // Line breaks and paragraphs
    .replace(/\n\n/gim, '</p><p style="margin-bottom: 1rem; color: #374151; line-height: 1.6;">')
    .replace(/\n/gim, '<br/>');
};

// Copy both plain text and rich HTML to clipboard
export const copyRichText = async (plainText: string, title?: string): Promise<void> => {
  try {
    const htmlContent = convertToHTML(plainText);
    
    // Wrap in a complete HTML structure
    const styledHTML = `
      <div style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; line-height: 1.6; color: #374151; max-width: none;">
        ${title ? `<div style="margin-bottom: 2rem; padding: 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 0.5rem; text-align: center;">
          <h2 style="margin: 0; font-size: 1.5rem; font-weight: 700;">${title}</h2>
          <p style="margin: 0.5rem 0 0 0; opacity: 0.9; font-size: 0.875rem;">Generated by GitSense.dev</p>
        </div>` : ''}
        <div style="margin-bottom: 1rem; color: #374151; line-height: 1.6;">${htmlContent}</div>
      </div>
    `;

    // Try to copy both formats
    if (navigator.clipboard && typeof ClipboardItem !== 'undefined') {
      const clipboardItem = new ClipboardItem({
        'text/html': new Blob([styledHTML], { type: 'text/html' }),
        'text/plain': new Blob([plainText], { type: 'text/plain' }),
      });
      
      await navigator.clipboard.write([clipboardItem]);
      toast.success('Rich text copied! Paste into any app that supports formatting.');
    } else {
      // Fallback to plain text
      await navigator.clipboard.writeText(plainText);
      toast.success('Text copied to clipboard!');
    }
  } catch (error) {
    console.error('Copy failed:', error);
    // Final fallback
    try {
      await navigator.clipboard.writeText(plainText);
      toast.success('Plain text copied to clipboard!');
    } catch (fallbackError) {
      toast.error('Failed to copy to clipboard');
    }
  }
};

// Copy with custom formatting for different contexts
export const copyForContext = async (
  content: string, 
  context: 'slack' | 'discord' | 'notion' | 'markdown' | 'email',
  title?: string
): Promise<void> => {
  let formattedContent = content;
  let successMessage = 'Copied to clipboard!';

  switch (context) {
    case 'slack':
      // Slack markdown format
      formattedContent = content
        .replace(/^# (.*$)/gim, '*$1*')
        .replace(/^## (.*$)/gim, '*$1*')
        .replace(/^### (.*$)/gim, '*$1*')
        .replace(/\*\*([^*]+)\*\*/gim, '*$1*')
        .replace(/`([^`]+)`/gim, '`$1`');
      successMessage = 'Copied for Slack! Ready to paste with formatting.';
      break;

    case 'discord':
      // Discord markdown (similar to standard markdown)
      successMessage = 'Copied for Discord! Markdown formatting preserved.';
      break;

    case 'notion':
      // Notion-friendly format
      await copyRichText(content, title);
      return;

    case 'email':
      // HTML email format
      const emailHTML = `
        <div style="font-family: Arial, sans-serif; line-height: 1.6; color: #333;">
          ${title ? `<h2 style="color: #2563eb; border-bottom: 2px solid #e5e7eb; padding-bottom: 0.5rem;">${title}</h2>` : ''}
          ${convertToHTML(content)}
          <hr style="margin: 2rem 0; border: none; border-top: 1px solid #e5e7eb;">
          <p style="font-size: 0.875rem; color: #6b7280; font-style: italic;">
            Generated by <a href="https://gitsense.dev" style="color: #2563eb;">GitSense.dev</a>
          </p>
        </div>
      `;
      
      try {
        if (typeof ClipboardItem !== 'undefined') {
          const clipboardItem = new ClipboardItem({
            'text/html': new Blob([emailHTML], { type: 'text/html' }),
            'text/plain': new Blob([content], { type: 'text/plain' }),
          });
          await navigator.clipboard.write([clipboardItem]);
        } else {
          await navigator.clipboard.writeText(content);
        }
        successMessage = 'Copied for email! Rich formatting included.';
      } catch {
        await navigator.clipboard.writeText(content);
        successMessage = 'Copied as plain text for email!';
      }
      break;

    case 'markdown':
    default:
      // Clean markdown format
      successMessage = 'Copied as Markdown! Ready for GitHub, docs, etc.';
      break;
  }

  try {
    await navigator.clipboard.writeText(formattedContent);
    toast.success(successMessage);
  } catch (error) {
    toast.error('Failed to copy to clipboard');
  }
};